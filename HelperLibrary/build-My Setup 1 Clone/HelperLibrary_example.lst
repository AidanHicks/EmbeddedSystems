;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 24/10/2025 14:05:18
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF001EF14  	GOTO        552
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_Div_8X8_U:
;__Lib_Math.c, 42 :: 		void Div_8X8_U()
;__Lib_Math.c, 45 :: 		CLRF   math_main_global_Remainder_1
0x001C	0x6A08      	CLRF        R8, 0
;__Lib_Math.c, 46 :: 		MOVLW  8
0x001E	0x0E08      	MOVLW       8
;__Lib_Math.c, 47 :: 		MOVWF  math_main_global_LoopCount
0x0020	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c, 48 :: 		RLCF   math_main_global_X_1,W
0x0022	0x3400      	RLCF        R0, 0, 0
;__Lib_Math.c, 49 :: 		RLCF   math_main_global_Remainder_1,F
0x0024	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c, 50 :: 		MOVF   math_main_global_Y_1,W
0x0026	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c, 51 :: 		SUBWF  math_main_global_Remainder_1,F
0x0028	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c, 52 :: 		BTFSC  STATUS,C,0
0x002A	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c, 53 :: 		BRA    $+6 //$+3
0x002C	0xD002      	BRA         $+6
;__Lib_Math.c, 54 :: 		ADDWF  math_main_global_Remainder_1,F
0x002E	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c, 55 :: 		BCF    STATUS,C,0
0x0030	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c, 56 :: 		RLCF   math_main_global_X_1,F
0x0032	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c, 57 :: 		DECFSZ math_main_global_LoopCount,F
0x0034	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c, 58 :: 		BRA    $-20 //$-10
0x0036	0xD7F5      	BRA         $-20
;__Lib_Math.c, 66 :: 		* @result The quotient of the division.
L_end_Div_8X8_U:
0x0038	0x0012      	RETURN      0
; end of _Div_8X8_U
_all_off:
;seven_seg.c, 13 :: 		void all_off(void){ if (DIG_ACTIVE_HIGH) LATA=0x00; else LATA=0x0F; }
0x003A	0x6A89      	CLRF        LATA 
L_all_off1:
L_end_all_off:
0x003C	0x0012      	RETURN      0
; end of _all_off
_Div_16X16_U:
;__Lib_Math.c, 68 :: 		void Div_16X16_U()
;__Lib_Math.c, 71 :: 		CLRF   math_main_global_Remainder_1
0x003E	0x6A08      	CLRF        R8, 0
;__Lib_Math.c, 72 :: 		CLRF   math_main_global_Remainder_2
0x0040	0x6A09      	CLRF        R9, 0
;__Lib_Math.c, 73 :: 		MOVLW  16
0x0042	0x0E10      	MOVLW       16
;__Lib_Math.c, 74 :: 		MOVWF  math_main_global_LoopCount
0x0044	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c, 75 :: 		RLCF   math_main_global_X_2,W
0x0046	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c, 76 :: 		RLCF   math_main_global_Remainder_1,F
0x0048	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c, 77 :: 		RLCF   math_main_global_Remainder_2,F
0x004A	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c, 78 :: 		MOVF   math_main_global_Y_1,W
0x004C	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c, 79 :: 		SUBWF  math_main_global_Remainder_1,F
0x004E	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c, 80 :: 		MOVF   math_main_global_Y_2,W
0x0050	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c, 81 :: 		BTFSS  STATUS,C,0
0x0052	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c, 82 :: 		INCFSZ math_main_global_Y_2,W
0x0054	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c, 83 :: 		SUBWF  math_main_global_Remainder_2,F
0x0056	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c, 84 :: 		BTFSC  STATUS,C,0
0x0058	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c, 85 :: 		BRA    $+16 //$+8
0x005A	0xD007      	BRA         $+16
;__Lib_Math.c, 86 :: 		MOVF   math_main_global_Y_1,W
0x005C	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c, 87 :: 		ADDWF  math_main_global_Remainder_1,F
0x005E	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c, 88 :: 		MOVF   math_main_global_Y_2,W
0x0060	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c, 89 :: 		BTFSC  STATUS,C,0
0x0062	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c, 90 :: 		INCFSZ math_main_global_Y_2,W
0x0064	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c, 91 :: 		ADDWF  math_main_global_Remainder_2,F
0x0066	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c, 92 :: 		BCF    STATUS,C,0
0x0068	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c, 93 :: 		RLCF   math_main_global_X_1,F
0x006A	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c, 94 :: 		RLCF   math_main_global_X_2,F
0x006C	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c, 95 :: 		DECFSZ math_main_global_LoopCount,F
0x006E	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c, 96 :: 		BRA    $-42 //$-21
0x0070	0xD7EA      	BRA         $-42
;__Lib_Math.c, 104 :: 		* @result The quotient of the division.
L_end_Div_16X16_U:
0x0072	0x0012      	RETURN      0
; end of _Div_16X16_U
_seg_for:
;seven_seg.c, 12 :: 		unsigned char seg_for(unsigned char d){ return CC_DIGITS[d%10u]; }
0x0074	0x0E0A      	MOVLW       10
0x0076	0x6E04      	MOVWF       R4 
0x0078	0xF000C01E  	MOVFF       FARG_seg_for_d, R0
0x007C	0xDFCF      	RCALL       _Div_8X8_U
0x007E	0xF000C008  	MOVFF       R8, R0
0x0082	0x0E3C      	MOVLW       _CC_DIGITS
0x0084	0x2400      	ADDWF       R0, 0 
0x0086	0x6EF6      	MOVWF       TBLPTR 
0x0088	0x0E02      	MOVLW       hi_addr(_CC_DIGITS)
0x008A	0x6EF7      	MOVWF       TBLPTR+1 
0x008C	0x0E00      	MOVLW       0
0x008E	0x22F7      	ADDWFC      TBLPTR+1, 1 
0x0090	0x0E00      	MOVLW       higher_addr(_CC_DIGITS)
0x0092	0x6EF8      	MOVWF       TBLPTR+2 
0x0094	0x0E00      	MOVLW       0
0x0096	0x22F8      	ADDWFC      TBLPTR+2, 1 
0x0098	0x0009      	TBLRD*+
0x009A	0xF000CFF5  	MOVFF       TABLAT, R0
L_end_seg_for:
0x009E	0x0012      	RETURN      0
; end of _seg_for
_enable_pos:
;seven_seg.c, 14 :: 		void enable_pos(unsigned char pos){
;seven_seg.c, 15 :: 		unsigned char mask = DIG_MASKS[ DIG_MAP[pos] ];
0x00A0	0x0E15      	MOVLW       _DIG_MAP
0x00A2	0x6ED9      	MOVWF       FSR2L 
0x00A4	0x0E00      	MOVLW       hi_addr(_DIG_MAP)
0x00A6	0x6EDA      	MOVWF       FSR2L+1 
0x00A8	0x501E      	MOVF        FARG_enable_pos_pos, 0 
0x00AA	0x26D9      	ADDWF       FSR2L, 1 
0x00AC	0xB0D8      	BTFSC       STATUS, 0 
0x00AE	0x2ADA      	INCF        FSR2L+1, 1 
0x00B0	0x0E4A      	MOVLW       _DIG_MASKS
0x00B2	0x24DE      	ADDWF       POSTINC2, 0 
0x00B4	0x6EF6      	MOVWF       TBLPTR 
0x00B6	0x0E02      	MOVLW       hi_addr(_DIG_MASKS)
0x00B8	0x6EF7      	MOVWF       TBLPTR+1 
0x00BA	0x0E00      	MOVLW       0
0x00BC	0x22F7      	ADDWFC      TBLPTR+1, 1 
0x00BE	0x0E00      	MOVLW       higher_addr(_DIG_MASKS)
0x00C0	0x6EF8      	MOVWF       TBLPTR+2 
0x00C2	0x0E00      	MOVLW       0
0x00C4	0x22F8      	ADDWFC      TBLPTR+2, 1 
0x00C6	0x0009      	TBLRD*+
0x00C8	0xF000CFF5  	MOVFF       TABLAT, R0
;seven_seg.c, 16 :: 		if (DIG_ACTIVE_HIGH) LATA = mask; else LATA = (unsigned char)(0x0F ^ mask);
0x00CC	0xFF89C000  	MOVFF       R0, LATA
L_enable_pos3:
;seven_seg.c, 17 :: 		}
L_end_enable_pos:
0x00D0	0x0012      	RETURN      0
; end of _enable_pos
___FillZeros:
;__Lib_System.c, 18 :: 		void __FillZeros()
;__Lib_System.c, 20 :: 		while ( FSR0 > FSR1 )
L___FillZeros1:
0x00D2	0x50EA      	MOVF        FSR0+1, 0 
0x00D4	0x5CE2      	SUBWF       FSR1+1, 0 
0x00D6	0xE102      	BNZ         L____FillZeros12
0x00D8	0x50E9      	MOVF        FSR0, 0 
0x00DA	0x5CE1      	SUBWF       FSR1, 0 
L____FillZeros12:
0x00DC	0xE202      	BC          L___FillZeros2
;__Lib_System.c, 21 :: 		POSTINC1 = 0;
0x00DE	0x6AE6      	CLRF        POSTINC1 
0x00E0	0xD7F8      	BRA         L___FillZeros1
L___FillZeros2:
;__Lib_System.c, 22 :: 		}
L_end___FillZeros:
0x00E2	0x0012      	RETURN      0
; end of ___FillZeros
_set_seven_seg:
;seven_seg.c, 22 :: 		void set_seven_seg(unsigned short v) {
;seven_seg.c, 23 :: 		ANSELA=0x00; ANSELD=0x00;
0x00E4	0x010F      	MOVLB       15
0x00E6	0x6B38      	CLRF        ANSELA, 1
0x00E8	0x6B3B      	CLRF        ANSELD, 1
;seven_seg.c, 24 :: 		TRISD=0x00;
0x00EA	0x6A95      	CLRF        TRISD 
;seven_seg.c, 25 :: 		TRISA0_bit=0; TRISA1_bit=0; TRISA2_bit=0; TRISA3_bit=0;
0x00EC	0x9092      	BCF         TRISA0_bit, BitPos(TRISA0_bit+0) 
0x00EE	0x9292      	BCF         TRISA1_bit, BitPos(TRISA1_bit+0) 
0x00F0	0x9492      	BCF         TRISA2_bit, BitPos(TRISA2_bit+0) 
0x00F2	0x9692      	BCF         TRISA3_bit, BitPos(TRISA3_bit+0) 
;seven_seg.c, 26 :: 		segments[0] = v % 10u;
0x00F4	0x0E0A      	MOVLW       10
0x00F6	0x6E04      	MOVWF       R4 
0x00F8	0xF000C01D  	MOVFF       FARG_set_seven_seg_v, R0
0x00FC	0xDF8F      	RCALL       _Div_8X8_U
0x00FE	0xF000C008  	MOVFF       R8, R0
0x0102	0xF019C000  	MOVFF       R0, _segments
;seven_seg.c, 27 :: 		segments[1]  = (v/10u) % 10u;
0x0106	0x0E0A      	MOVLW       10
0x0108	0x6E04      	MOVWF       R4 
0x010A	0xF000C01D  	MOVFF       FARG_set_seven_seg_v, R0
0x010E	0xDF86      	RCALL       _Div_8X8_U
0x0110	0x0E0A      	MOVLW       10
0x0112	0x6E04      	MOVWF       R4 
0x0114	0xDF83      	RCALL       _Div_8X8_U
0x0116	0xF000C008  	MOVFF       R8, R0
0x011A	0xF01AC000  	MOVFF       R0, _segments+1
;seven_seg.c, 28 :: 		segments[2]  = (v/100u) % 10u;
0x011E	0x0E64      	MOVLW       100
0x0120	0x6E04      	MOVWF       R4 
0x0122	0xF000C01D  	MOVFF       FARG_set_seven_seg_v, R0
0x0126	0xDF7A      	RCALL       _Div_8X8_U
0x0128	0x0E0A      	MOVLW       10
0x012A	0x6E04      	MOVWF       R4 
0x012C	0xDF77      	RCALL       _Div_8X8_U
0x012E	0xF000C008  	MOVFF       R8, R0
0x0132	0xF01BC000  	MOVFF       R0, _segments+2
;seven_seg.c, 29 :: 		segments[3]  = (v/1000u) % 10u;
0x0136	0x0EE8      	MOVLW       232
0x0138	0x6E04      	MOVWF       R4 
0x013A	0x0E03      	MOVLW       3
0x013C	0x6E05      	MOVWF       R4+1 
0x013E	0xF000C01D  	MOVFF       FARG_set_seven_seg_v, R0
0x0142	0x0E00      	MOVLW       0
0x0144	0x6E01      	MOVWF       R0+1 
0x0146	0xDF7B      	RCALL       _Div_16X16_U
0x0148	0x0E0A      	MOVLW       10
0x014A	0x6E04      	MOVWF       R4 
0x014C	0x0E00      	MOVLW       0
0x014E	0x6E05      	MOVWF       R4+1 
0x0150	0xDF76      	RCALL       _Div_16X16_U
0x0152	0xF000C008  	MOVFF       R8, R0
0x0156	0xF001C009  	MOVFF       R8+1, R0+1
0x015A	0xF01CC000  	MOVFF       R0, _segments+3
;seven_seg.c, 30 :: 		}
L_end_set_seven_seg:
0x015E	0x0012      	RETURN      0
; end of _set_seven_seg
___CC2DW:
;__Lib_System.c, 24 :: 		void __CC2DW()
;__Lib_System.c, 27 :: 		_CC2DL_Loop1:
_CC2DL_Loop1:
;__Lib_System.c, 28 :: 		TBLRD*+
0x0160	0x0009      	TBLRD*+
;__Lib_System.c, 29 :: 		MOVFF TABLAT, POSTINC1
0x0162	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c, 30 :: 		DECF   R0, 1
0x0166	0x0600      	DECF        R0, 1, 0
;__Lib_System.c, 31 :: 		BNZ _CC2DL_Loop1
0x0168	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c, 32 :: 		DECF   R1, 1
0x016A	0x0601      	DECF        R1, 1, 0
;__Lib_System.c, 33 :: 		BNZ _CC2DL_Loop1
0x016C	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c, 35 :: 		}
L_end___CC2DW:
0x016E	0x0012      	RETURN      0
; end of ___CC2DW
_seven_seg_scan:
;seven_seg.c, 32 :: 		void seven_seg_scan(void){
;seven_seg.c, 33 :: 		all_off(); LATD=0x00; Delay_us(BLANK_US); LATD=seg_for(segments[0]); enable_pos(0);
0x0170	0xDF64      	RCALL       _all_off
0x0172	0x6A8C      	CLRF        LATD 
0x0174	0x0ED5      	MOVLW       213
0x0176	0x6E0D      	MOVWF       R13, 0
L_seven_seg_scan4:
0x0178	0x2E0D      	DECFSZ      R13, 1, 0
0x017A	0xD7FE      	BRA         L_seven_seg_scan4
0x017C	0xF01EC019  	MOVFF       _segments, FARG_seg_for_d
0x0180	0xDF79      	RCALL       _seg_for
0x0182	0xFF8CC000  	MOVFF       R0, LATD
0x0186	0x6A1E      	CLRF        FARG_enable_pos_pos 
0x0188	0xDF8B      	RCALL       _enable_pos
;seven_seg.c, 34 :: 		Delay_us(SCAN_ON_US);
0x018A	0x0E0A      	MOVLW       10
0x018C	0x6E0C      	MOVWF       R12, 0
0x018E	0x0E58      	MOVLW       88
0x0190	0x6E0D      	MOVWF       R13, 0
L_seven_seg_scan5:
0x0192	0x2E0D      	DECFSZ      R13, 1, 0
0x0194	0xD7FE      	BRA         L_seven_seg_scan5
0x0196	0x2E0C      	DECFSZ      R12, 1, 0
0x0198	0xD7FC      	BRA         L_seven_seg_scan5
0x019A	0x0000      	NOP
;seven_seg.c, 35 :: 		all_off(); LATD=0x00; Delay_us(BLANK_US); LATD=seg_for(segments[1]); enable_pos(1);
0x019C	0xDF4E      	RCALL       _all_off
0x019E	0x6A8C      	CLRF        LATD 
0x01A0	0x0ED5      	MOVLW       213
0x01A2	0x6E0D      	MOVWF       R13, 0
L_seven_seg_scan6:
0x01A4	0x2E0D      	DECFSZ      R13, 1, 0
0x01A6	0xD7FE      	BRA         L_seven_seg_scan6
0x01A8	0xF01EC01A  	MOVFF       _segments+1, FARG_seg_for_d
0x01AC	0xDF63      	RCALL       _seg_for
0x01AE	0xFF8CC000  	MOVFF       R0, LATD
0x01B2	0x0E01      	MOVLW       1
0x01B4	0x6E1E      	MOVWF       FARG_enable_pos_pos 
0x01B6	0xDF74      	RCALL       _enable_pos
;seven_seg.c, 36 :: 		Delay_us(SCAN_ON_US);
0x01B8	0x0E0A      	MOVLW       10
0x01BA	0x6E0C      	MOVWF       R12, 0
0x01BC	0x0E58      	MOVLW       88
0x01BE	0x6E0D      	MOVWF       R13, 0
L_seven_seg_scan7:
0x01C0	0x2E0D      	DECFSZ      R13, 1, 0
0x01C2	0xD7FE      	BRA         L_seven_seg_scan7
0x01C4	0x2E0C      	DECFSZ      R12, 1, 0
0x01C6	0xD7FC      	BRA         L_seven_seg_scan7
0x01C8	0x0000      	NOP
;seven_seg.c, 37 :: 		all_off(); LATD=0x00; Delay_us(BLANK_US); LATD=seg_for(segments[2]); enable_pos(2);
0x01CA	0xDF37      	RCALL       _all_off
0x01CC	0x6A8C      	CLRF        LATD 
0x01CE	0x0ED5      	MOVLW       213
0x01D0	0x6E0D      	MOVWF       R13, 0
L_seven_seg_scan8:
0x01D2	0x2E0D      	DECFSZ      R13, 1, 0
0x01D4	0xD7FE      	BRA         L_seven_seg_scan8
0x01D6	0xF01EC01B  	MOVFF       _segments+2, FARG_seg_for_d
0x01DA	0xDF4C      	RCALL       _seg_for
0x01DC	0xFF8CC000  	MOVFF       R0, LATD
0x01E0	0x0E02      	MOVLW       2
0x01E2	0x6E1E      	MOVWF       FARG_enable_pos_pos 
0x01E4	0xDF5D      	RCALL       _enable_pos
;seven_seg.c, 38 :: 		Delay_us(SCAN_ON_US);
0x01E6	0x0E0A      	MOVLW       10
0x01E8	0x6E0C      	MOVWF       R12, 0
0x01EA	0x0E58      	MOVLW       88
0x01EC	0x6E0D      	MOVWF       R13, 0
L_seven_seg_scan9:
0x01EE	0x2E0D      	DECFSZ      R13, 1, 0
0x01F0	0xD7FE      	BRA         L_seven_seg_scan9
0x01F2	0x2E0C      	DECFSZ      R12, 1, 0
0x01F4	0xD7FC      	BRA         L_seven_seg_scan9
0x01F6	0x0000      	NOP
;seven_seg.c, 39 :: 		all_off(); LATD=0x00; Delay_us(BLANK_US); LATD=seg_for(segments[3]); enable_pos(3);
0x01F8	0xDF20      	RCALL       _all_off
0x01FA	0x6A8C      	CLRF        LATD 
0x01FC	0x0ED5      	MOVLW       213
0x01FE	0x6E0D      	MOVWF       R13, 0
L_seven_seg_scan10:
0x0200	0x2E0D      	DECFSZ      R13, 1, 0
0x0202	0xD7FE      	BRA         L_seven_seg_scan10
0x0204	0xF01EC01C  	MOVFF       _segments+3, FARG_seg_for_d
0x0208	0xDF35      	RCALL       _seg_for
0x020A	0xFF8CC000  	MOVFF       R0, LATD
0x020E	0x0E03      	MOVLW       3
0x0210	0x6E1E      	MOVWF       FARG_enable_pos_pos 
0x0212	0xDF46      	RCALL       _enable_pos
;seven_seg.c, 40 :: 		Delay_us(SCAN_ON_US);
0x0214	0x0E0A      	MOVLW       10
0x0216	0x6E0C      	MOVWF       R12, 0
0x0218	0x0E58      	MOVLW       88
0x021A	0x6E0D      	MOVWF       R13, 0
L_seven_seg_scan11:
0x021C	0x2E0D      	DECFSZ      R13, 1, 0
0x021E	0xD7FE      	BRA         L_seven_seg_scan11
0x0220	0x2E0C      	DECFSZ      R12, 1, 0
0x0222	0xD7FC      	BRA         L_seven_seg_scan11
0x0224	0x0000      	NOP
;seven_seg.c, 41 :: 		}
L_end_seven_seg_scan:
0x0226	0x0012      	RETURN      0
; end of _seven_seg_scan
0x0228	0xF001EC36  	CALL        620, 0
_main:
0x022C	0xF001EC27  	CALL        590, 0
;main.c, 12 :: 		int main(void)
;main.c, 14 :: 		set_seven_seg(9876);
0x0230	0x0E94      	MOVLW       148
0x0232	0x6E1D      	MOVWF       FARG_set_seven_seg_v 
0x0234	0xDF57      	RCALL       _set_seven_seg
;main.c, 15 :: 		while (1) {
L_main0:
;main.c, 16 :: 		seven_seg_scan();
0x0236	0xDF9C      	RCALL       _seven_seg_scan
;main.c, 17 :: 		}
0x0238	0xD7FE      	BRA         L_main0
;main.c, 18 :: 		return 0;
;main.c, 19 :: 		}
L_end_main:
0x023A	0xD7FF      	BRA         $+0
; end of _main
0x024E	0xF015EE10  	LFSR        1, 21
0x0252	0x0E04      	MOVLW       4
0x0254	0x6E00      	MOVWF       R0 
0x0256	0x0E01      	MOVLW       1
0x0258	0x6E01      	MOVWF       R1 
0x025A	0x0E46      	MOVLW       70
0x025C	0x6EF6      	MOVWF       TBLPTR 
0x025E	0x0E02      	MOVLW       2
0x0260	0x6EF7      	MOVWF       TBLPTRH 
0x0262	0x0E00      	MOVLW       0
0x0264	0x6EF8      	MOVWF       TBLPTRU 
0x0266	0xF000ECB0  	CALL        352, 0
0x026A	0x0012      	RETURN      0
0x026C	0xF015EE10  	LFSR        1, 21
0x0270	0xF01DEE00  	LFSR        0, 29
0x0274	0xF000EC69  	CALL        210, 0
0x0278	0x0012      	RETURN      0
;seven_seg.c,9 :: _CC_DIGITS
0x023C	0x063F ;_CC_DIGITS+0
0x023E	0x4F5B ;_CC_DIGITS+2
0x0240	0x6D66 ;_CC_DIGITS+4
0x0242	0x077D ;_CC_DIGITS+6
0x0244	0x6F7F ;_CC_DIGITS+8
; end of _CC_DIGITS
;seven_seg.c,0 :: ?ICS_DIG_MAP
0x0246	0x0203 ;?ICS_DIG_MAP+0
0x0248	0x0001 ;?ICS_DIG_MAP+2
; end of ?ICS_DIG_MAP
;seven_seg.c,8 :: _DIG_MASKS
0x024A	0x0201 ;_DIG_MASKS+0
0x024C	0x0804 ;_DIG_MASKS+2
; end of _DIG_MASKS
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [30]    _Div_8X8_U
0x003A       [4]    _all_off
0x003E      [54]    _Div_16X16_U
0x0074      [44]    _seg_for
0x00A0      [50]    _enable_pos
0x00D2      [18]    ___FillZeros
0x00E4     [124]    _set_seven_seg
0x0160      [16]    ___CC2DW
0x0170     [184]    _seven_seg_scan
0x0228      [20]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [4]    _DIG_MAP
0x0019       [4]    _segments
0x001D       [1]    FARG_set_seven_seg_v
0x001E       [1]    FARG_seg_for_d
0x001E       [1]    FARG_enable_pos_pos
0x0F38       [1]    ANSELA
0x0F3B       [1]    ANSELD
0x0F89       [1]    LATA
0x0F8C       [1]    LATD
0x0F92       [0]    TRISA1_bit
0x0F92       [0]    TRISA0_bit
0x0F92       [0]    TRISA3_bit
0x0F92       [0]    TRISA2_bit
0x0F95       [1]    TRISD
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE1       [2]    FSR1
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [2]    FSR0
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF6       [3]    TBLPTR
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x023C      [10]    _CC_DIGITS
0x0246       [4]    ?ICS_DIG_MAP
0x024A       [4]    _DIG_MASKS
